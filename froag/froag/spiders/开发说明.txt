收集目标：收集文章及其相应资源（图片，代码），提取文章特征及其特征的权值，存储这些特征和源地址
收集来源：新闻网站，技术博客，问答网站
页面生成优化策略：根据页面访问频率分别将页面存储至内存，文件系统，数据库
页面生成控制：页面存储调度 页面转化策略 页面模板
功能扩展：绑定其他网站账号完善个人信息  课表、商品、音乐、视频、出行推荐

已知：
1. 大多的文章已被分类并打上标签
2. 在文章页面可能含有已有推荐系统推荐的相似页面
3. 部分网站存在可用的API
4. 大多文章页面的进入链接不是图片
5. 推荐系统可能只支持文本式的标签读取
6. 大型新闻门户网站的网页链接非常多
7. 暂时只支持单机版爬虫

需解决的问题：
1. 如何提取文章及其资源
2. 如何提取出有效的跟进链接
3. 对于大型网站如何避免陷入死循环及有效终止爬取
4. 如何对待过时的文章
5. 如何提取文本特征及权值
6. 如何存储访问文本的特征及权值
7. 如何根据原页面内容生成符合本网站风格的页面
8. 如何调度存储用户访问时新生成的文章页面

注：
1. 可利用已知的标签对页面进行粗分类
2. 可利用已有API简便获取文章及其相关推荐
3. 可将已有推荐系统推荐的页面进行相近存储，确定推荐页面与被推荐页面所有标签权值的间隔或叫做相似性
4. 在进行文章存储时应该存储其特征标签及简易介绍（标题，作者，日期，源，配图）
5. 应根据用户反馈调整文章推荐的权值
6. 对于越重要的网站中越热门的文章推荐权值越高
7. pageRank：被越多网页链接的网页越重要，引用页面越重要则本页面越重要
8. 对于深度越深和过时越久的页面给予低权值
9. 为了提高查询速度和降低冗余，可将用户对页面的评价存在同一行,貌似效率并不会提高，评论肯定需单独存储，对于赞和踩需要
	用事务保证数据一致性，速度肯定慢，但好像不保证也没什么关系

收集时可能遇到的问题：
1. 内存泄露
2. robot.txt
3. HTTP认证
4. API使用次数限制
5. IP封杀
6. 验证码识别
7. 执行JS
8. Cookie和Session
9. ASP/VB的特殊表单
10. 页面语言/编码

已有工具：
1. Scrapy
2. Requests
3. BeautifulSoup
3. Numpy/Pandans
4. Selenium
5. NLTK/Pattern  jieba/loso/genius(中文分词工具)  SnowNLP(中文文本处理库)
6. Firebug(JS已被解析，tbody)  XPather
7. Scrapyd
8. pillow

Scrapy：
	Command: 
		Global：startproject  settings  runspider  shell  fetch  view  version
		Project: crawl  check  list  edit  parse  genspider  deploy  bench

	Spider：
		CrawlSpider  XMLSpider  CSVSpider  SitemapSpider

	Selector:
		CSS  Regex  Xpath  

	ItemExporter:
		XML  JSON  JSONLines  CSV

	FeedStorage:
		File  FTP  S3  stdout

	LinkExtractor:
		LxmlLinkExtractor  SgmlLinkExtractor

	Keywords:
		Item   Item Loaders  Item Pipeline(ImagePipeLine)   Logging    MailSender   
		Telnet(控制Scrapy进程)  Traceref/Guppy(调试内存泄露)  AutoThrottle(自动限速)   
		Benchmarking(性能测试)   Jobs(爬虫持久化)  Spiders Contracts(单元测试)
		Downloader Middleware   Spider Middleware

程序问题标注：
	采用广度优先
	环球网mcontent中包括了相关文章等多余内容 修复 17.5.9
	应该将<a>标签去掉而保留其中的文本 修复 17.5.9
 	本应去掉的<script>标签似乎没有去掉 修复 17.5.9
	环球网爬虫代码中存在内存泄露的情况 似乎是正常现象 17.5.9

文本处理说明：
	如何提取文本特征及权值
	如何存储访问文本的特征及权值

	文本为含布局标签的格式化文档
	可根据文档中含有的标签进行粗分类
	每项数据可辅助分类的数据项有：时间  标题  作者  初始标签
	可根据Url之间的关系和已有的推荐页面确定页面的重要性和标签之间的关系

	可用的分类基准，网址前缀/初始标签  标题  内容 作者
	使用jieba将标题分词  
	使用jieba中的训练数据提取文本中的关键字及其权值
	使用snownlp再次提取关键字及其权值
	取出两个库中关键词结果的交集，权值取两结果集中的平均
	若关键字在标题的分词结果中出现过，使权值加倍（或其他大于一的数）
	取权值前五的词做真实标签并附上权值
	将交集中关键字作为初始标签中可能出现的标签
	最终程序输出结果为：
		[文本初始标签（大分类） 新标签（小分类）]将此数据和其他相关数据转存至实际数据库中的推送数据表
		[大标签中可能出现的小标签]将数据存储到实际数据库的标签表

	注：snownlp中的KeywordTextRank的top_index函数，snownlp中的keywords函数被自己修改过，之前返回关键字，改为关键字和权值，
		必要时记得将源码改回
		将snownlp中keywords函数默认分词方法改为jieba分词

		两种关键字提取方法生成权值方法不同，生成如下数据：
		根据数据发现：可能需要标识出现的关键字出自哪个文本，以便于之后的分类

		修改前：

			jb精确模式：美媒\ ：\ 澳门\ 引入\ ATM\ 人脸识别\ 技术\ 阻\ 中国\ 内地\ 居民\ 洗钱

			jb全模式：美\ 媒\ \ \ 澳门\ 引入\ ATM\ 人脸\ 人脸识别\ 识别\ 技术\ 阻\ 中国\ 国内\ 内地\ 居民\ 洗钱

			sn精确模式：{'洗钱': (2.077511249267458, 5), 'Kim': (1.4598833571036898, 11), '阻止': (1.7150970851287177, 7), '澳门':
			(4.827884731031754, 0), '反': (1.6051661220644802, 9), '不': (1.348836113069093, 17), '机': (1.468915779758252, 10), '内地':
			(2.9225480987260237, 1), '中国': (2.878173604033985, 2), '脸': (1.4029707697861522, 13), '赌博': (1.3550164088345893, 15),
			'规': (1.3521065354535156, 16), 'ATM': (2.627099848480707, 3), '——': (2.3219524204812108, 4), '识别': (1.3045879822044553, 
			19), '人': (1.691962652823503, 8), '客': (1.3891999691084858, 14), '月': (1.75341082191922, 6), '居民': (1.4367072632079052, 
			12), '中介': (1.3186934061205242, 18)}

			sn全模式：['Kim', '阻止', '澳门', '反洗钱', '不', '中国内地', '脸识别', '赌博', '规', 'ATM机', '——', '人', '客', '月', '居民', 
			'中介']

			[('ATM', 0.3815351330712766), ('澳门', 0.3581225837655319), ('取现', 0.24474005062127657), ('赌客', 0.23426182753404257), 
			('赌博', 0.21881261661702125), ('内地', 0.16993882712659575), ('人脸识别', 0.12717837769042553), ('Kim', 0.12717837769042553), 
			('反洗钱', 0.10918182438510637), ('银行卡', 0.09324339590351063), ('核实', 0.08685218462234043), ('中介', 
			0.08395600496308511), ('中国', 0.0805138480494681), ('阻止', 0.07440343482265957), ('声明', 0.07214735535010638), ('使用', 
			0.07206861610835105), ('澳门特区政府', 0.07025282165638298), ('身份', 0.07022932116234043), ('张卡', 0.06656586856861701), 
			('一些', 0.06439071711271277)]


		修改后：

			美媒\ ：\ 澳门\ 引入\ ATM\ 人脸识别\ 技术\ 阻\ 中国\ 内地\ 居民\ 洗钱

			美\ 媒\ \ \ 澳门\ 引入\ ATM\ 人脸\ 人脸识别\ 识别\ 技术\ 阻\ 中国\ 国内\ 内地\ 居民\ 洗钱

			{'ATM': (2.7123982682754186, 4), '反洗钱': (1.70146744947494, 8), '内地': (3.1183008514786534, 2), '贬值': 
			(1.2420612925004388, 16), '月': (1.531214896950519, 11), '取现': (1.532367839819461, 10), 'Kim': (1.4598833571036898, 12), 
			'阻止': (1.7466410227690532, 7), '人脸识别': (1.447697087089077, 13), '机': (1.6788036364895915, 9), '使': 
			(1.2420612925004388, 17), '中介': (1.3214213297710844, 15), '银行卡': (1.148429058666759, 19), '中国': (3.0139184231425014, 
			3), '澳门': (4.005447142134498, 0), '反恐': (1.1621927502243836, 18), '—': (2.5871350294920172, 5), '赌客': 
			(2.0235421667549405, 6), '技术': (1.4383024837057876, 14), '赌博': (3.424006309341327, 1)}

			['ATM机', '反洗钱', '贬值', '月', '取现', 'Kim', '阻止', '人脸识别技术', '使', '中介', '银行卡', '中国内地', '澳门', '反恐', 
			'—', '赌客', '赌博']

			[('ATM', 0.3815351330712766), ('澳门', 0.3581225837655319), ('取现', 0.24474005062127657), ('赌客', 0.23426182753404257), 
			('赌博', 0.21881261661702125), ('内地', 0.16993882712659575), ('Kim', 0.12717837769042553), ('人脸识别', 0.12717837769042553),
			('反洗钱', 0.10918182438510637), ('银行卡', 0.09324339590351063), ('核实', 0.08685218462234043), ('中介', 
			0.08395600496308511), ('中国', 0.0805138480494681), ('阻止', 0.07440343482265957), ('声明', 0.07214735535010638), ('使用', 
			0.07206861610835105), ('澳门特区政府', 0.07025282165638298), ('身份', 0.07022932116234043), ('张卡', 0.06656586856861701), 
			('一些', 0.06439071711271277)]

		数据一：

			源：http://oversea.huanqiu.com/article/2017-05/10624282.html

			修改前：

				标题分词：美媒\ ：\ 澳门\ 引入\ ATM\ 人脸识别\ 技术\ 阻\ 中国\ 内地\ 居民\ 洗钱

				sn:
					{'居民': (1.4367072632079052, 12), '内地': (2.9225480987260237, 1), '洗钱': (2.077511249267458, 5), '反': 
					(1.6051661220644802, 9), '阻止': (1.7150970851287177, 7), '客': (1.3891999691084858, 14), '识别': (1.3045879822044553, 
					19), '机': (1.468915779758252, 10), '规': (1.3521065354535156, 16), '——': (2.3219524204812108, 4), '脸': 
					(1.4029707697861522, 13), '中国': (2.878173604033985, 2), '不': (1.348836113069093, 17), 'Kim': (1.4598833571036898, 
					11), '人': (1.691962652823503, 8), '月': (1.75341082191922, 6), '澳门': (4.827884731031754, 0), '赌博': 
					(1.3550164088345893, 15), 'ATM': (2.627099848480707, 3), '中介': (1.3186934061205242, 18)}
				
				jb:
					[('ATM', 0.3815351330712766), ('澳门', 0.3581225837655319), ('取现', 0.24474005062127657), ('赌客', 
					0.23426182753404257), ('赌博', 0.21881261661702125), ('内地', 0.16993882712659575), ('人脸识别', 0.12717837769042553), 
					('Kim', 0.12717837769042553), ('反洗钱', 0.10918182438510637), ('银行卡', 0.09324339590351063), ('核实', 
					0.08685218462234043), ('中介', 0.08395600496308511), ('中国', 0.0805138480494681), ('阻止', 0.07440343482265957), 
					('声明', 0.07214735535010638), ('使用', 0.07206861610835105), ('澳门特区政府', 0.07025282165638298), ('身份', 
					0.07022932116234043), ('张卡', 0.06656586856861701), ('一些', 0.06439071711271277)]
				
				关键字:权值 jb排名 sn排名
				ATM:6.885604 jb:0 sn:3
				澳门:13.481095 jb:1 sn:0
				赌博:6.192588 jb:4 sn:15
				内地:17.197648 jb:5 sn:1
				Kim:11.479022 jb:7 sn:11
				中介:15.706958 jb:11 sn:18
				中国:35.747560 jb:12 sn:2
				阻止:23.051316 jb:13 sn:7

			修改后：

				美媒\ ：\ 澳门\ 引入\ ATM\ 人脸识别\ 技术\ 阻\ 中国\ 内地\ 居民\ 洗钱

				{'反洗钱': (1.70146744947494, 8), '机': (1.6788036364895915, 9), '中介': (1.3214213297710844, 15), '内地': 
				(3.1183008514786534, 2), '月': (1.531214896950519, 11), '—': (2.5871350294920172, 5), '取现': (1.532367839819461, 10), 
				'银行卡': (1.148429058666759, 19), 'Kim': (1.4598833571036898, 12), '澳门': (4.005447142134498, 0), '技术': 
				(1.4383024837057876, 14), '人脸识别': (1.447697087089077, 13), '赌客': (2.0235421667549405, 6), '反恐': 
				(1.1621927502243836, 18), '阻止': (1.7466410227690532, 7), '赌博': (3.424006309341327, 1), 'ATM': (2.7123982682754186, 4), 
				'中国': (3.0139184231425014, 3), '使': (1.2420612925004388, 16), '贬值': (1.2420612925004388, 17)}

				[('ATM', 0.3815351330712766), ('澳门', 0.3581225837655319), ('取现', 0.24474005062127657), ('赌客', 0.23426182753404257), 
				('赌博', 0.21881261661702125), ('内地', 0.16993882712659575), ('Kim', 0.12717837769042553), ('人脸识别', 
				0.12717837769042553), ('反洗钱', 0.10918182438510637), ('银行卡', 0.09324339590351063), ('核实', 0.08685218462234043), 
				('中介', 0.08395600496308511), ('中国', 0.0805138480494681), ('阻止', 0.07440343482265957), ('声明', 0.07214735535010638), 
				('使用', 0.07206861610835105), ('澳门特区政府', 0.07025282165638298), ('身份', 0.07022932116234043), ('张卡', 
				0.06656586856861701), ('一些', 0.06439071711271277)]

				ATM:7.109170 jb:0 sn:4
				澳门:11.184570 jb:1 sn:0
				取现:6.261206 jb:2 sn:10
				赌客:8.637951 jb:3 sn:6
				赌博:15.648121 jb:4 sn:1
				内地:18.349549 jb:5 sn:2
				Kim:11.479022 jb:6 sn:12
				人脸识别:11.383201 jb:7 sn:13
				反洗钱:15.583798 jb:8 sn:8
				银行卡:12.316465 jb:9 sn:19
				中介:15.739450 jb:11 sn:15
				中国:37.433541 jb:12 sn:3
				阻止:23.475274 jb:13 sn:7

				最终标签：[('澳门', 18.73260611390331), ('ATM', 16.847448821304976), ('内地', 11.324343207442585), ('中国', 
				8.438313918143006), ('人脸识别', 6.702944935762867)]

		数据二：

			源：http://oversea.huanqiu.com/article/2016-12/9842395.html

			标题分词：华媒\ ：\ 多个\ 节日\ 接踵而至\  \ 澳门\ 警方\ 严阵以待

			sn:
				{'口岸': (1.7048964893169054, 10), '警员': (2.399840636533159, 1), '应': (1.6059170658625141, 15), '边境': 
				(2.1104614418070873, 3), '澳门': (1.429856351006025, 19), '措施': (1.7831574802632904, 7), '期间': (1.897156347891531, 6), 
				'警方': (1.590159095663737, 16), '日': (2.2574283983938317, 2), '时': (2.066386378821325, 4), '秩序': (1.7207135081840073, 
				9), '治安': (3.215645801966538, 0), '人员': (1.661186882877271, 12), '适时': (1.738566791754991, 8), '加派': 
				(1.5233728067423211, 18), '警察局': (2.0551849936541884, 5), '出入境': (1.5851272100340061, 17), '活动': 
				(1.6401570090773627, 14), '市民': (1.6539076658316887, 13), '情况': (1.7016921590771836, 11)}

			jb:
				[('警察局', 0.31359208875154637), ('治安', 0.25575667639639177), ('警员', 0.17308186779742268), ('出入境', 
				0.14778668397092784), ('轮候', 0.12324502580309278), ('20', 0.12324502580309278), ('警方', 0.11281515047984536), ('高峰', 
				0.10561783832041237), ('市民', 0.09647443442891752), ('疏导', 0.09438912910938144), ('人流', 0.08905141714505156), 
				('澳门', 0.08676165689164948), ('口岸', 0.08654995995917526), ('措施', 0.08497210899804124), ('实时', 
				0.08416603458247422), ('采取', 0.08271777887381443), ('适时', 0.08161589042567009), ('秩序', 0.07560830125948453), 
				('边境', 0.07485362699123711), ('内勤人员', 0.07165297758762887)]
			
			关键字:权值 jb排名 sn排名
			警察局:6.553689 jb:0 sn:5
			治安:12.573067 jb:1 sn:0
			警员:13.865350 jb:2 sn:1
			出入境:10.725778 jb:3 sn:17
			警方:14.095262 jb:6 sn:16
			市民:17.143481 jb:8 sn:13
			澳门:16.480279 jb:11 sn:19
			口岸:19.698409 jb:12 sn:10
			措施:20.985209 jb:13 sn:7
			适时:21.301817 jb:16 sn:8
			秩序:22.758262 jb:17 sn:9
			边境:28.194511 jb:18 sn:3

			最终标签：[('警方', 6.910850714944388), ('澳门', 5.886003858544251), ('警察局', 4.077922892530176), ('治安', 
			3.5450505495462132), ('警员', 2.6829024047323387)]

		根据数据调整后关键字获取方法为：
			取两种方法的平均权值，由于jieba中的权值与sn比例相差较大，取所有关键字snownlp权值除以jieba权值的平均倍数，将jieba权值乘以平均倍
			数，标题词权值*4，取出所有同时出现在标题词和两种方法中，若取出的词少于最小值，剩余取出两方法结果交集权值较大的词

		根据最终标签发现其中存在一些无法作为分类的关键词，有必要时想办法筛选出这些词，或根据建立好的标签库推测出含有这些词的文章的新标签

	数据存储说明： 5.14
	
		数据存储在sqlite中，由于不能同时打开多个连接，所以不同数据存储在不同的数据库文件中
		当初由于在设置id自增时发现sql语句无法对于非主键的字段设置，故将源网址设置为主键，现在导致无法一次取出指定数据段
		考虑将所有数据存储到Oracle中，在文章信息表中加入Id字段，在标签表中加入便签来源

		修正：实际上是有Id字段了，忘了自己加了

		python3 oracle 在win7上安装方法：
		1. 下载安装cx_Oracle包 地址：https://pypi.python.org/pypi/cx_Oracle/5.3
		2. 下载安装oracle_client 地址：http://download.oracle.com/otn/nt/oracle11g/112010/
		win64_11gR2_client.zip?AuthParam=1494728733_c7f462a96fee2f8d447d3ed75b712fc5
		3. 下载安装instantclient 地址：http://www.oracle.com/technetwork/topics/winx64soft-089540.html
		4. 将instantclient拷贝到oracle_client下的product
		5. 在环境变量path加入instantclient目录

		oracle监听器配置：5.15
		使用lsnrctl stop关闭监听器
		修改product/network/admin下的listener.ora 和 tnsnames.ora 
		在win7下存在权限问题，可将文件移动到其他地方后移回
		需保持两个文件中的Ip地址一致，否则会出现pl/sql无法连接的情况
		最后使用lsnrctl start重启监听器，注意需要管理员权限

		数据库设计说明：
		简单起见使用CONNECT和RESOURCE两个系统角色

		需存取数据的地方：
		1. 数据收集时需存储url之间的关系，本页面的推荐url，还有带粗标签的标准文章数据
		2. 分类时需取出并修改文章数据表中的数据，并且需要向标签表中插入数据
		3. 优化分类时需要读取并修改文章数据表、标签表中的数据
		4. 推荐时需要用到url关系表，相似url表，文章数据表，用户信息表

		1、2步可根据效率合并

		可分5种用户：
		数据库管理员：使用已存在的system  x1
		数据所有者：具有CONNECT和RESOURCE两个角色  x1 
		标签优化操作员：具有CONNECT和文章数据表、标签表的所有对象权限  x1
		推荐系统用户：具有CONNECT和url关系表，相似url表，文章数据表，用户信息表，便签表的所有对象权限  x1
		数据采集用户：具有CONNECT和url关系表，相似url表，文章数据表，标签表的所有对象权限  x3

		数据采集分类所涉及的表结构：

		文章数据表：
		'''CREATE TABLE IF NOT EXISTS MsgTable(mId INTEGER PRIMARY KEY AUTOINCREMENT, \
                        mSource text NOT NULL UNIQUE, \
                        mTitle text NOT NULL, \
                        mIntro text NOT NULL, \
                        mPic text NOT NULL, \
                        mTags text NOT NULL, \
                        mAuthor text NOT NULL,\
                        mContent text NOT NULL, \
                        mPublishTime datetime NOT NULL, \
                        mCollectTime datetime NOT NULL
                        mLikeCount int NOT NULL, \
						mDislikeCount int NOT NULL, \
						mCollectCount int NOT NULL, \
						mTransmitCount int NOT NULL)'''

        URL关系表：
        '''CREATE TABLE IF NOT EXISTS UrlRelation(url text, \
        				parentUrl text, \
        				primary key(url,parentUrl))'''

        相似URL表
        '''CREATE TABLE IF NOT EXISTS SimilarUrl(url text, \
        				similarUrl text, \
        				primary key(url,similarUrl))'''

        标签表：（sourceId不作外键约束）
        '''CREATE TABLE IF NOT EXISTS TagTable(tag text, \
        				parentTag text, \
        				sourceId INTEGER, \
        				primary key(tag,parentTag))'''

		用户表：
		'''CREATE TABLE IF NOT EXISTS UserTable(uid INTEGER PRIMARY KEY AUTOINCREMENT,
						uname nvarchar(50) NOT NULL, \
						upass varchar(50) NOT NULL, \
						ufeature_uri ntext NULL, \
						umail varchar(50) UNIQUE NOT NULL, \
						udate datetime NOT NULL, \
						uaddr ntext NULL, \
						upro ntext NULL, \
						uedu ntext NULL, \
						uintro ntext NULL, \
						uskill ntext NULL, \
						upic image NULL)'''
		

		oracle建表语句：

		create USER foragOwner identified by foragOwner;
		grant CONNECT,RESOURCE to foragOwner;

		//把mPic和mIntro改为可为空，mTag改为NVARCHAR2(200) 2017-5-18
		CREATE TABLE MsgTable(mId INT PRIMARY KEY,
                        mSource NVARCHAR2(500) NOT NULL UNIQUE,
                        mTitle NCLOB NOT NULL,
                        mIntro NCLOB,
                        mPic NCLOB,
                        mTags NCLOB NOT NULL,
                        mAuthor NVARCHAR2(500) NOT NULL,
                        mContent NCLOB NOT NULL,
                        mPublishTime DATE NOT NULL,
                        mCollectTime DATE NOT NULL,
                        mLikeCount INT NOT NULL,
                        mDislikeCount INT NOT NULL,
                        mCollectCount INT NOT NULL,
                        mTransmitCount INT NOT NULL);
		create SEQUENCE MID_SEQ minvalue 1 nomaxvalue start with 1 increment by 1 cache 20 nocycle;

		CREATE TABLE UrlRelation(sourceUrl NVARCHAR2(500),
                parentUrl NVARCHAR2(500),
                primary key(sourceUrl,parentUrl));

		CREATE TABLE SimilarUrl(sourceUrl NVARCHAR2(500),
        				similarUrl NVARCHAR2(500),
        				primary key(sourceUrl,similarUrl));

		CREATE TABLE TagTable(sourceTag NVARCHAR2(100),
                parentTag NVARCHAR2(100),
                sourceId INT,
                primary key(sourceTag,parentTag));

        //在插入时无法获取到当前插入的文章的ID，不过考虑到时间和空间效率，假设item是以顺序进入各个pipeline中的，
        //可在插入item时获取序列的当前ID作为标签的sourceId
        //CREATE TABLE TagTable(sourceTag NVARCHAR2(20),
        //        parentTag NVARCHAR2(20),
        //        sourceId NVARCHAR2(100),
        //        primary key(sourceTag,parentTag));

        //uid与数据库冲突
        CREATE TABLE UserTable(utId INT PRIMARY KEY,
            utName nvarchar2(50) NOT NULL,
            utPass varchar2(50) NOT NULL,
            utFeatureUri varchar2(500) NULL,
            utMail varchar2(50) UNIQUE NOT NULL,
            utDate date NOT NULL,
            utAddr nvarchar2(500) NULL,
            utPro nvarchar2(200) NULL,
            utEdu nvarchar2(200) NULL,
            utIntro nvarchar2(500) NULL,
            utSkill nvarchar2(200) NULL,
            uPic nvarchar2(500) NULL);
		create sequence UTID_SEQ minvalue 1 nomaxvalue start with 1 increment by 1 cache 20 nocycle;

		create ROLE foragTagger identified by foragTagger;
		create ROLE foragRecommander identified by foragRecommander;
		create ROLE foragCollecter identified by foragCollecter;

		//导致无法设置用户默认角色而无法连接数据库
		//grant CONNECT to foragTagger;
		//grant CONNECT to foragRecommander;
		//grant CONNECT to foragCollecter;
		grant all on foragOwner.MsgTable to foragTagger;
		grant all on foragOwner.MsgTable to foragRecommander;
		grant all on foragOwner.MsgTable to foragCollecter;
		grant all on foragOwner.TagTable to foragTagger;
		grant all on foragOwner.TagTable to foragCollecter;
		grant all on foragOwner.TagTable to foragRecommander;
		grant all on foragOwner.UrlRelation to foragRecommander;
		grant all on foragOwner.SimilarUrl to foragCollecter;
		grant all on foragOwner.SimilarUrl to foragRecommander;
		grant all on foragOwner.UrlRelation to foragCollecter;
		grant all on foragOwner.UserTable to foragRecommander;

		grant select, insert, update, delete, alter on FORAGOWNER.MSGTABLE to FORAGTAGGER;

		create user foragTagger_1 identified by foragTagger;
		create user foragRecommander_1 identified by foragRecommander;
		create user foragCollecter_1 identified by foragCollecter;
		create user foragCollecter_2 identified by foragCollecter;
		create user foragCollecter_3 identified by foragCollecter;

		grant foragTagger,CONNECT to foragTagger_1;
		grant foragRecommander,CONNECT to foragRecommander_1;
		grant foragCollecter,CONNECT to foragCollecter_1;
		grant foragCollecter,CONNECT to foragCollecter_2;
		grant foragCollecter,CONNECT to foragCollecter_3; 

		alter user foragTagger_1 default role foragTagger,CONNECT;
		alter user foragRecommander_1 default role foragRecommander,CONNECT;
		alter user foragCollecter_1 default role foragCollecter,CONNECT;
		alter user foragCollecter_2 default role foragCollecter,CONNECT;
		alter user foragCollecter_3 default role foragCollecter,CONNECT;
		
		//不知为何把自己创建的角色赋予用户，用户并不能拥有角色的权限，只有手动赋权
		grant select,insert,delete,update,alter on MsgTable to foragCollecter_1,foragCollecter_2,foragCollecter_3,foragRecommander_1,foragTagger_1;
		grant select,insert,delete,update,alter on TagTable to foragCollecter_1,foragCollecter_2,foragCollecter_3,foragTagger_1，foragRecommander_1;
		grant select,insert,delete,update,alter on UrlRelation to foragCollecter_1,foragCollecter_2,foragCollecter_3,foragRecommander_1;
		grant select,insert,delete,update,alter on SimilarUrl to foragCollecter_1,foragCollecter_2,foragCollecter_3,foragRecommander_1;
		grant select,insert,delete,update,alter on UserTable to foragRecommander_1;

		grant select,alter on MID_SEQ to foragCollecter_1,foragCollecter_2,foragCollecter_3,foragRecommander_1,foragTagger_1;
		grant select,alter on UTID_SEQ to foragCollecter_1,foragCollecter_2,foragCollecter_3,foragRecommander_1,foragTagger_1;

		注：5.17

			在使用python的prepare加executemany一次性插入多条纪录时，sql语句的占位符不可使用？,应该使用:1,:2之类的
			使用executemany并不能忽略单个数据出现约束异常，改回循环插入
			在pipeline中过滤item后记得返回item

		oracle编码问题：5.18
			修改服务器的字符编码：设置nls_lang环境变量，修改oracle注册表中nls_lang字段
			修改数据库内部编码步骤：
			shutdown immediate
			startup mount
			alter system enable restricted session
			alter system set job_queue_processes=0
			alter system set aq_tm_processes=0
			alter database open
			alter database character set internal_use utf8
			shutdown immediate
			startup

		cx_oracle编码问题：
			需在程序之前加上：os.environ['NLS_LANG'] = 'SIMPLIFIED CHINESE_CHINA.UTF8'
			否则会出现sql中占位符无法绑定unicode字符，出现UnicodeError异常
			并且就算使用encode编码sql语句，插入和查询的结果仍为乱码

		注：在执行对数据库的修改操作时，若此时在另外一个客户端（比如pl/sql）修改了数据，
			同时在python中也想修改数据时，此时会因为数据锁的原因导致python无限挂起

		5.19

		注：
			python中使用全局变量时应该使用global定义
			在收集数据时偶尔会出现错误：cx_Oracle.DatabaseError: ORA-01461: 仅能绑定要插入 LONG 列的 LONG 值
			爬虫运行命令：scrapy crawl huanqiu --logfile log.txt -s JOBDIR=crawls/huanqiu-1

		剩余问题：
			1. 如何对待过时的文章  可考虑以插入时以发布时间排序，并以其为索引
			2. 数据量过大如何提高查询和处理速度  为常用的字段添加索引
			3. 如何根据原页面内容生成符合本网站风格的页面  应用样式模板，页面标签过滤
			4. 如何调度存储用户访问时新生成的文章页面   需在MsgTable添加一个页面存储地址
			5. 如何根据文章的标签和用户的兴趣、行为推荐合适的页面
			6. 如何在标签库中提取出可做标签的命名实体（时间、地点、人物、机构）、动词专有名词、情感分析、知识库实体

		需要和前台对接的接口：
			1. 获取用户喜好页面简介 参数：用户操作日志（包括用户对各个文章（文章信息：标签，作者，id）的评价、用户喜好标签、用户信息）输出：文章简介列表HTML文本 状态码
			2. 获取具体页面 参数：页面ID，使用模板名称  输出：指定文章的HTML文本 状态码
			3. 上传页面模板、调度策略、爬虫组件 参数：文件 输出：状态码

			注：
			服务器需要一个线程池提供给Java程序频繁连接
			进行一次服务后直接断开连接，无状态连接
			调用格式：方法名称，参数{name:params}
			返回json格式的文本：请求调用信息  响应信息

		如何使用Java调用python程序接口：
			1. 使用jython可在java中执行python代码，调用函数，执行脚本
			2. 使用python编写一个小型服务器提供上述接口服务
			3. 使用web服务器构建一个webAPI

		页面生成说明：5-27

			前台获取显示的信息：用户评价按钮 文章评价信息（评论、收藏、点赞、踩、转发）  用户评论 

			存在问题：图片大小和位置不正确
			模板需要描述的样式：源地址 标签 作者  标题  内容 发布时间的位置及其样式 

			样式模板文件描述示例：
				{
					"data": {
							"item": {
								"sql": "select * from foragOwner.msgtable where mid=[[params.pageid]]"
							}, 
							"item-similar": {
								"sql": "select * from foragOwner.msgtable,(select similarurl from foragOwner.similarurl where sourceurl=[[item.MSOURCE]]) s where msource=similarurl"
							}
					},
					"rule": {
						"imghandler": {
							"col": ["[[item.MCONTENT]]"],
							"way": "web"
						}
					},
					"style": {
						"css": ["css/articleTemplate.css"],
						"js": ["xx.js"],
						"layout": 
							"<article class='item'>
				              <header class='item-head'>
				                <h3 class='item-title'>[[item.MTITLE]]</h3>
				                <section class='item-meta'>
				                  <span class='item-author'>作者：<a href='#'>[[item.MAUTHOR]]</a></span> •
				                  <time class='item-date'>[[item.MPUBLISHTIME]]</time>
				                </section>
				              </header>
				              <section class='item-content' replaceway='{\"bs\":[0]}'>[[item.MCONTENT]]</section>
				              <footer class='item-foot'>
				                <section class='item-souce'> 
				                  <span class='item-source'>
				                    <a  href='[[item.MSOURCE]]'>原网站</a>
				                  </span>
				                </section>
				                <section class='item-tag'>
				                  <span class='label' repeat='true' statement='{\"class\":{\"way\":\"+r\",\"values\":[\"label-danger\",\"label-success\",\"label-info\",\"label-warning\",\"label-primary\"]}}'>[[item.MTAGS]]
				                  </span>
				                </section>
				              </footer>
				            </article>
				            <section class='item-similar'>
				           	 <div class='table-responsive'>
				               <table class='table table-hover'>
				                 <tr repeat='true'>
				                   <td class='item-text' style='width:40%;'>[[item-similar.MTITLE]]</td>
				                   <td style='width:25%;'>
				                      <div class='progress progress-xs'>
				                        <div class='progress-bar progress-bar-danger' style='width:50%'></div>
				                      </div>
				                    </td>
				                    <td class='item-tag hidden-xs' style='width:35%;'>
				                      <span class='label label-danger'>[[item-similar.MTAGS]]
				                      </span>
				                    </td>
				                 </tr>
				                </table>
				             </div>
				            </section>"
				    }

				}

				模板解析分为四个步骤：
				1. 数据获取
				2. 列规则应用
				3. 样式展开
				4. 数据填充


	python函数式编程：
	map,reduce(累计序列函数执行结果),fiter(筛选序列)
	闭包(返回函数体内的函数，返回的函数可访问局部变量，主要用于惰性计算，但注意每次访问都产生一个新闭包，但所有闭包引用同一个局部变量)
	装饰器(动态增加函数功能，返回函数，其他语言需借助装饰模式，python直接语言级别支持)
	偏函数：绑定函数的某参数，类似C++的bind

	python高级面向对象：
	访问控制：__xx私有，_xx保护
	动态类与实例：类与实例均可在代码中增加属性和方法，但可通过__slot__来限制
	属性：@property读取  @property.setter
	枚举类：enum模块
	类定制：__len__,__str__,__iter__,__getitem__(对应[]),__getattr__,__call__(直接调用对象s())

	python常用标准模块及功能：
	struct(支持数据类型到字节的方便转换)
	hashlib(多种hash摘要算法)
	itertool(count, repeat, cycle, chain, groupby)
	SQLAlchemy(提供ORM功能，对象关系映射)
	ThreadLocal(线程全局对象，为每个线程分配不同的局部变量，但提供便捷访问，不同线程数据互不干扰，无需加锁)
	select提供多种IO复用机制：
		select:轮询一组文件描述符，返回活跃描述符，每次均需将fd从用户空间拷贝至内核空间，内核空间筛选fd，将活跃fd由内核至用户，且有最大数量限制
		poll:改进select的fd文件描述符的最大数量限制
		epoll：fd注册时直接拷贝至内核空间并绑定回调函数，fd活跃后直接调用回调函数，且使用MMap(将文件映射内存)避免fd的复制
	selector：自动选择当前平台效率最高的IO复用机制
	asynio: 
		协程：轻量级线程，无切换开销，属于同一线程，但可随时中断去执行其他代码，无需加锁
		将方法标记为异步，异步方法可调用其他异步方法，通过消息循环实现异步，新增asyn和await关键字
	asyncore:标准库建议转用asynio
	threading: 支持线程及其相应锁机制
	mutiprocessing:支持多进程及进程通信机制(Pipe,Queue)，内置进程池，资源共享机制(共享内存及Manager)
	subprocess:创建子进程，使用子进程执行其他程序的任务并获取执行结果
	shced:实现了一个时间调度程序，该调度程序可以通过单线程执行来处理按照时间尺度进行调度的事件
	concurrent.future:提供threading和mutiprocessing更高级的接口，内部有ThreadPoolExecutor和ProcessPoolExecutor，方便编写线/进程池

	可推荐的依据：
	1.大分类
	2.小分类及权值
	3.作者
	4.已有相关页面
	5.页面重要度
	6.时间，热度

	请求/交互数据示例：
        {
			"type":"hot",//hot or special 说明：hot表示取热门数据，此时log为空、special表示取推荐数据
			"length":10,//需要取的长度
			"log":[//日志信息，推荐的根据
					{
						"time":"2017\u002d05\u002d06\u002012\u003a25\u003a45",
				            "type":"comment",//comment/browse/like 用户操作类型
				            "msg-info":{//文章信息
				            	"id":2,
				            	"author":"Administer",
				            	"list-tags":[
				            		{
				            			"tag-name":"tag1",
				            			"weight":0.7
				            		},
				            		{
				            			"tag-name":"tag2",
				            			"weight":0.3
				            		}
				            	]
				            },
				            "context":"Test\u0020Log\u0020information\u00201"//当type=comment时才不为空，也有可能不发送这项数据
				    },
			],
			"user":{//用户信息，当type=hot时可能为空
			        "name":"ZhangSan",//用户基本信息
			        "number":"875424845@forag.cn",
			        "like-tags":[//用户喜爱标签列表
			        	{
		                    "tag-name":"tag1",//标签名
		                    "weight":0.8//权值
			            },
		                {
		                	"tag-name":"tag3",
		                	"weight":0.1
		                },
		                {
		                	"tag-name":"tag3",
		                	"weight":0.1
		                }
		            ]
		    }
		}

    剩余问题：6-5
    1. 如何对待过时的文章  可考虑以插入时以发布时间排序，并以其为索引
	2. 数据量过大如何提高查询和处理速度  为常用的字段添加索引
	3. 如何根据文章的标签和用户的兴趣、行为推荐合适的页面
	4. 如何在标签库中提取出可做标签的命名实体（时间、地点、人物、机构）、动词专有名词、情感分析、知识库实体

	同类产品体验：
		一点资讯：一点资讯把很多常理来说不应该作为标签的值也作为一个频道，搜索非常理标签时会返回包含此值的页面，类似搜索引擎的搜索结
		果。
		今日头条：今日头条只列出少部分热门的标签，对于一些潜在的标签做出类似搜索引擎的搜索结果，同时对于一些命名实体可能存在响应的一点号
		对于某个关键字的搜索，搜索结果包括视频、图集、用户、问答几个模块，同时进行搜索时会有推荐你想搜的

		总结：就两个产品来说，用户进行的搜索大多不会是标签，关注标签可能会是从文章标签中去选择
		所以对文章关键字进行标签筛选可能并不必要，在用户进入某异常标签时，返回类似搜索引擎结果，匹配此关键字。也可为根据关键字归类。为每个关键字分配一个频道。

	推荐算法：
	1. 基于用户的协同过滤，计算用户之间的相似度来为用户推荐其他用户喜欢的，都喜欢冷门物品的用户可能具有较大相似性
	2. 基于物品的协同过滤，根据购买此物品的也购买了其他物品的行为来确定物品的相似度，然后推荐用户喜爱物品的相似物品，但要减少活跃用户对物品相似性的计算。
	3.冷启动问题：根据注册信息或基本信息；初次进入让用户选择一些大类型标签
	4.利用用户对文章的自主标记
	5.基于图的推荐算法
	6.上下文(时间，地点，事件)对推荐的影响
	Word sense disambiguation: Algorithms and application